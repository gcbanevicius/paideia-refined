require 'digest/sha1'

class User < ActiveRecord::Base
  # attr_accessible :title, :body
  
  validates_length_of :username, :within => 8..25
  validates_length_of :password, :within => 8..25
  validates_presence_of :username, :email, :email_confirmation, :password, :password_confirmation, :salt
  validates_uniqueness_of :username, :email
  validates_confirmation_of :email, :password
  validates_format_of :email, :with => /^([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})$/i, :message => "Invalid email"
  
  #attr_protected :id, :salt
  
  attr_accessible :password, :password_confirmation, :username, :home_institute, :email, :name, :id, :salt

  def self.randomize_string(len)
    # results in a random string, useful for salting passwords  
    chars = ("0".."9").to_a + ("a".."z").to_a + ("A".."Z").to_a
    mypass = ""
    len.times do |i|
      mypass << chars[rand(chars.size-1)]
    end
    return mypass
  end  
  
  def password=(mypass)
    @password = mypass
    self.salt = User.randomize_string(10) if !self.salt?
    self.hashed_password = User.encrypt(@password, self.salt)
  end
  
  def self.encrypt(password, salt)
    Digest::SHA1.hexdigest(mypass+salt)
  end
  
  def self.authenticate(username, password)
    u = find(:first, :conditions => ["username = ?", username])
    return nil if user.nil?
    return u if User.encrypt(password, u.salt) == u.hashed_password
    nil
  end
  
  def new_password
    newpass = User.randomize_string(10)
    self.password = self.password_confirmation = newpass
    self.save
    Notifications.deliver_forgot_password(self.email, self.username, newpass)
  end
  
end
